{"version":3,"sources":["Api/ImageApi.js","Util/ImageApiHelper.js","Projects/Project1/ImageCard.jsx","Pages/MainPage/ContentPage/MyGallery.jsx"],"names":["imageApi","axios","create","baseURL","process","timeout","apiImage","id","get","responseType","apiImageSize","blobURL","data","contentType","blob","b64Data","sliceSize","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob","type","b64toBlob","Buffer","from","toString","URL","createObjectURL","ImageCard","props","useState","shouldCreate","setShouldCreate","width","height","size","setSize","image","setImage","useEffect","a","res","console","log","bimage","btob","headers","src","alt","className","getSize","then","_","getImage","style","React","memo","MyGallery","widthRef","useRef","currentWidth","setCurrentWidth","imageGallery","columns","Math","max","floor","j","imageColumn","galleryResize","current","getComputedStyle","padding","mWidth","parseInt","replace","window","addEventListener","removeEventListener","glassColor","ref"],"mappings":"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","file":"static/js/5.7217f3d7.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst imageApi = axios.create({\r\n    baseURL: process.env.REACT_APP_REST_IP || 'http://localhost:5000',\r\n    timeout: 5000\r\n})\r\n\r\nexport const apiImage = id => imageApi.get(`api/image/${id}`, {\r\n    responseType: 'arraybuffer'\r\n});\r\n\r\nexport const apiImageSize = id => imageApi.get(`api/imageSize/${id}`)","const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {\r\n    const byteCharacters = atob(b64Data);\r\n    const byteArrays = [];\r\n\r\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n        const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n        const byteNumbers = new Array(slice.length);\r\n        for (let i = 0; i < slice.length; i++) {\r\n            byteNumbers[i] = slice.charCodeAt(i);\r\n        }\r\n\r\n        const byteArray = new Uint8Array(byteNumbers);\r\n        byteArrays.push(byteArray);\r\n    }\r\n    const blob = new Blob(byteArrays, { type: contentType });\r\n    return blob;\r\n}\r\n\r\nfunction blobURL(data, contentType) {\r\n    let base64 = Buffer.from(data, 'binary').toString('base64');\r\n    let blob = b64toBlob(base64, contentType);\r\n    return URL.createObjectURL(blob);\r\n}\r\n\r\nexport { blobURL };","import React, { useEffect, useState } from 'react'\r\nimport { apiImage, apiImageSize } from '../../Api/ImageApi';\r\nimport { blobURL as btob } from '../../Util/ImageApiHelper';\r\nimport './ImageCard.css';\r\n\r\nfunction ImageCard(props) {\r\n    const [shouldCreate, setShouldCreate] = useState(true)\r\n    const [size, setSize] = useState({ width: `${0}px`, height: `${0}px` });\r\n    const [image, setImage] = useState(null);\r\n    useEffect(\r\n        () => {\r\n            async function getSize() {\r\n                try {\r\n                    let res = await apiImageSize(props.id);\r\n                    setSize(res.data);\r\n                } catch (error) {\r\n                    console.log(error)\r\n                    throw error;\r\n                }\r\n            }\r\n\r\n            async function getImage() {\r\n                try {\r\n                    let res = await apiImage(props.id);\r\n                    let bimage = btob(res.data, res.headers[\"content-type\"]);\r\n                    setImage(\r\n                        <img src={bimage} alt=\"ImageCard\" className=\"image_card_image\"></img>\r\n                    );\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            getSize()\r\n                .then(_ => getImage(),\r\n                    _ => setShouldCreate(false))\r\n            return () => {\r\n                setShouldCreate(null);\r\n                setSize(null);\r\n                setImage(null);\r\n            }\r\n        },\r\n        [props.id]\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {shouldCreate &&\r\n                <div style={size} className=\"image_card\">\r\n                    {image}\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(ImageCard);","import React, { useEffect, useRef, useState } from 'react'\r\nimport Glass from '../../../Global/Glassmorphism'\r\nimport './MyGallery.css'\r\nimport ImageCard from '../../../Projects/Project1/ImageCard'\r\n\r\nfunction MyGallery() {\r\n    const widthRef = useRef(null);\r\n    const [currentWidth, setCurrentWidth] = useState(0);\r\n    let imageCardWidth = 240 + 20;\r\n\r\n\r\n    let imageGallery = [];\r\n    let columns = Math.max(Math.floor(currentWidth / imageCardWidth), 1)\r\n    let totalImages = 27;\r\n\r\n    for (let j = 1; j <= columns; j++) {\r\n        let imageColumn = []\r\n        for (let i = j; i <= totalImages; i = i + columns) {\r\n            imageColumn.push(\r\n                <ImageCard key={i} id={i}></ImageCard>\r\n            )\r\n        }\r\n\r\n        imageGallery.push(<div key={j} className=\"gallery_column\">{imageColumn}</div>);\r\n    }\r\n\r\n    useEffect(() => {\r\n        function galleryResize() {\r\n            if (!widthRef.current) {\r\n                return;\r\n            }\r\n            let { width, padding } = getComputedStyle(widthRef.current)\r\n            let mWidth = parseInt(width.replace(/[^\\d]/g, '')) -\r\n                parseInt(padding.replace(/[^\\d]/g, '')) * 2;\r\n            setCurrentWidth(mWidth);\r\n        }\r\n        galleryResize();\r\n\r\n        window.addEventListener('resize', galleryResize, true);\r\n        return window.removeEventListener('resize', galleryResize)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div id='myGallery_description' className='my_d_container s_t_default_bg'>\r\n                <div className='s_c_padding h1_container'>\r\n                    <h1>My Gallery</h1>\r\n                </div>\r\n            </div>\r\n            <div id=\"myGallery_container\" className=\"content_container\">\r\n                <div id=\"gallery_container\" className=\"s_c_padding\" >\r\n                    <Glass id=\"gallery\" glassColor=\"white\" ref={widthRef}>\r\n                        {imageGallery}\r\n                    </Glass>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default MyGallery;"],"sourceRoot":""}